name: trigger-template


on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "master" ]
    types: [opened, edited, reopened]
    paths:
        - '**.csv'


  # workflow_dispatch:
  #   inputs:
  #     PR_branch:
  #       description: 'Branch targeted by the PR'
  #       default: 'main'
  #       required: true
  #       type: string




permissions:
  id-token: write
  contents: write
  pull-requests: write


jobs:


  trigger-template:
    runs-on: ubuntu-latest
    # ${{ fromJSON('["self-hosted","Linux","X64"]' || '["self-hosted","Linux","ephemeral"]') }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Check for all Files Changes
        run: |
            git fetch
            echo 'executing git diff'
            git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs
            files_changed=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)
           
            echo -e "\n Files Changed: $files_changed"
      
      # - name:  create new PR for Validation
      #   if: steps.status_changed.outputs.file_changed == 'true'
      #   env:
      #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #       git status >> git.txt
      #       ls -lha;
      #       cat git.txt
      #       if [ $(git status --porcelain | wc -l) -eq "0" ]; then
      #           echo "No changes detected."
      #       else
      #           echo "Changes detected for new PR."
      #           git config user.name "secops-ipgroup-management"
      #           git config user.email "<>"
      #           newBranch=botFMG_$(date +"%d-%m-%Y_%H_%M")
      #           git checkout -b $newBranch
      #           #git commit -am "automated FMG ip group update"
      #           git add . #*.csv
      #           ls -lha
      #           git commit -m 'automated ipgroup update'
      #           git push --set-upstream origin $newBranch
      #           #gh pr create --base ${{ env.BRANCH_NAME }} --title "IP GROUP auto update process" --label ${{ env.INPUT_ENV }} --body "See changed files for details"  
      #           gh pr create --base fortimanager --title "IP GROUP auto update process" --body "See changed files for details"  
      #       fi


     


